#!/bin/bash

# Grafana Plugin Release Script
# Usage: ./scripts/release.sh <version>
# Example: ./scripts/release.sh 1.0.8

set -e

VERSION=$1
PLUGIN_ID="hover-hover-panel"
PLUGIN_NAME="hover-hover-panel"
REPO="StandardRunbook/grafana-hover-plugin"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

if [ -z "$VERSION" ]; then
  echo -e "${RED}Error: Version number required${NC}"
  echo "Usage: $0 <version>"
  echo "Example: $0 1.0.8"
  exit 1
fi

if [ -z "$GRAFANA_ACCESS_POLICY_TOKEN" ]; then
  echo -e "${RED}Error: GRAFANA_ACCESS_POLICY_TOKEN environment variable not set${NC}"
  echo "Export your Grafana signing token first:"
  echo "export GRAFANA_ACCESS_POLICY_TOKEN=your_token_here"
  exit 1
fi

echo -e "${GREEN}üöÄ Starting release process for v${VERSION}${NC}"
echo

# Step 1: Update version in package.json and plugin.json
echo -e "${YELLOW}üìù Updating version to ${VERSION}...${NC}"
sed -i.bak "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/" package.json
sed -i.bak "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/" src/plugin.json
# Note: go_plugin_build_manifest is regenerated by mage build, no need to update version
rm -f package.json.bak src/plugin.json.bak

# Step 2: Commit version changes BEFORE building
echo -e "${YELLOW}üíæ Committing version update...${NC}"
git add package.json src/plugin.json
git commit -m "Bump version to ${VERSION}" || echo "No version changes to commit"

# Step 3: Build backend with mage (AFTER committing version)
echo -e "${YELLOW}üî® Building backend with mage...${NC}"
go run github.com/magefile/mage@latest buildAll

# Step 4: Build frontend
echo -e "${YELLOW}üî® Building frontend...${NC}"
pnpm run build

# Step 5: Generate Go manifest (AFTER webpack to avoid clean: true wiping it)
echo -e "${YELLOW}üìã Generating Go plugin manifest...${NC}"
go run github.com/magefile/mage@latest build:generateManifestFile

# Step 6: Set executable permissions on binaries
echo -e "${YELLOW}üîê Setting executable permissions...${NC}"
chmod +x dist/gpx_${PLUGIN_NAME}_*

# Step 7: Sign the plugin
echo -e "${YELLOW}‚úçÔ∏è  Signing plugin...${NC}"
npx --yes @grafana/sign-plugin@latest --rootUrls http://localhost:3000

# Step 8: Create plugin package
echo -e "${YELLOW}üì¶ Creating plugin package...${NC}"
rm -rf tmp-package
mkdir -p tmp-package/${PLUGIN_NAME}
cp -r dist/* tmp-package/${PLUGIN_NAME}/
cd tmp-package
zip -r ../${PLUGIN_NAME}-${VERSION}.zip ${PLUGIN_NAME}
cd ..
rm -rf tmp-package

# Step 9: Generate checksums
echo -e "${YELLOW}üîí Generating checksums...${NC}"
MD5=$(md5sum ${PLUGIN_NAME}-${VERSION}.zip | awk '{print $1}')
SHA256=$(shasum -a 256 ${PLUGIN_NAME}-${VERSION}.zip | awk '{print $1}')
echo "$MD5" > ${PLUGIN_NAME}-${VERSION}.zip.md5
echo "$SHA256" > ${PLUGIN_NAME}-${VERSION}.zip.sha256

# Step 10: Tag the release commit
echo -e "${YELLOW}üè∑Ô∏è  Creating git tag...${NC}"
git tag -a v${VERSION} -m "Release v${VERSION}

ü§ñ Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>"

# Step 11: Push to GitHub with tags
echo -e "${YELLOW}‚¨ÜÔ∏è  Pushing to GitHub...${NC}"
git push && git push --tags

# Step 12: Create GitHub release
echo -e "${YELLOW}üéâ Creating GitHub release...${NC}"
gh release create v${VERSION} \
  --target main \
  ${PLUGIN_NAME}-${VERSION}.zip \
  ${PLUGIN_NAME}-${VERSION}.zip.md5 \
  ${PLUGIN_NAME}-${VERSION}.zip.sha256 \
  --title "Hover Panel v${VERSION}" \
  --notes "## Hover Panel v${VERSION}

Grafana plugin for automatic log correlation on hover.

### üì¶ Installation

\`\`\`bash
unzip ${PLUGIN_NAME}-${VERSION}.zip -d /var/lib/grafana/plugins/
\`\`\`

### üîê Checksums

- **MD5**: \`${MD5}\`
- **SHA256**: \`${SHA256}\`

### üìö Documentation

- [README](https://github.com/${REPO}#readme)
- [Testing Guide](https://github.com/${REPO}/blob/main/TESTING_GUIDE.md)

---

ü§ñ Generated with [Claude Code](https://claude.com/claude-code)"

echo
echo -e "${GREEN}‚úÖ Release v${VERSION} completed successfully!${NC}"
echo
echo -e "${GREEN}üìã Submission Information:${NC}"
echo
echo "Plugin ID: ${PLUGIN_ID}"
echo
echo "Download URL:"
echo "https://github.com/${REPO}/releases/download/v${VERSION}/${PLUGIN_NAME}-${VERSION}.zip"
echo
echo "MD5 Checksum:"
echo "${MD5}"
echo
echo "SHA256 Checksum:"
echo "${SHA256}"
echo
echo "Source Repository:"
echo "https://github.com/${REPO}"
echo

# Step 11: Run validator before cleanup
echo -e "${YELLOW}üîç Running validator...${NC}"
gh release download v${VERSION} --pattern "${PLUGIN_NAME}-${VERSION}.zip" --clobber
npx --yes @grafana/plugin-validator@latest -sourceCodeUri https://github.com/${REPO}#v${VERSION} ${PLUGIN_NAME}-${VERSION}.zip || true
echo

# Step 12: Cleanup release artifacts
echo -e "${YELLOW}üßπ Cleaning up release artifacts...${NC}"
rm -f ${PLUGIN_NAME}-${VERSION}.zip
rm -f ${PLUGIN_NAME}-${VERSION}.zip.md5
rm -f ${PLUGIN_NAME}-${VERSION}.zip.sha256

echo -e "${GREEN}‚ú® Cleanup complete!${NC}"
echo
