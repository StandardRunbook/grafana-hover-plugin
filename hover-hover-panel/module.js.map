{"version":3,"file":"module.js","mappings":"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","sources":["webpack://hover-hover-panel/external amd \"@grafana/ui\"","webpack://hover-hover-panel/external amd \"@emotion/css\"","webpack://hover-hover-panel/external amd \"@grafana/runtime\"","webpack://hover-hover-panel/external amd \"@grafana/data\"","webpack://hover-hover-panel/external amd \"react\"","webpack://hover-hover-panel/webpack/bootstrap","webpack://hover-hover-panel/webpack/runtime/compat get default export","webpack://hover-hover-panel/webpack/runtime/define property getters","webpack://hover-hover-panel/webpack/runtime/hasOwnProperty shorthand","webpack://hover-hover-panel/webpack/runtime/make namespace object","webpack://hover-hover-panel/./node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/esm/_async_to_generator.js","webpack://hover-hover-panel/./src/HoverTrackerPanel.tsx","webpack://hover-hover-panel/./src/module.ts","webpack://hover-hover-panel/./src/HoverTrackerEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) resolve(value);\n    else Promise.resolve(value).then(_next, _throw);\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n\n            _next(undefined);\n        });\n    };\n}\nexport { _async_to_generator as _ };\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport {\n  PanelProps,\n  DataHoverEvent,\n  LegacyGraphHoverEvent,\n  dateTime,\n} from \"@grafana/data\";\nimport { SimpleOptions, HoverEvent } from \"./types\";\nimport { css, cx } from \"@emotion/css\";\nimport { useStyles2 } from \"@grafana/ui\";\nimport { getAppEvents, config as grafanaConfig, getBackendSrv } from \"@grafana/runtime\";\n\ninterface Props extends PanelProps<SimpleOptions> {}\n\nexport const HoverTrackerPanel: React.FC<Props> = (props) => {\n  const { options, width, height, id, eventBus } = props;\n\n  // Note: buildPanelRegistry removed - no longer needed\n  // Note: buildRefIdToPanelMap removed - no longer needed\n  // Panel title comes directly from event.origin._state.title\n\n  const styles = useStyles2(getStyles);\n  const [currentHover, setCurrentHover] = useState<HoverEvent | null>(null);\n  const [apiLogs, setApiLogs] = useState<string[]>([]);\n  const [expandedLogs, setExpandedLogs] = useState<Set<number>>(new Set());\n  const [isLoadingLogs, setIsLoadingLogs] = useState(false);\n\n  const toggleLogExpansion = (index: number) => {\n    setExpandedLogs((prev) => {\n      const newSet = new Set(prev);\n      if (newSet.has(index)) {\n        newSet.delete(index);\n      } else {\n        newSet.add(index);\n      }\n      return newSet;\n    });\n  };\n\n  // Function to send metric data to backend plugin\n  const sendToAPI = useCallback(\n    async (event: HoverEvent, eventOrigin?: any) => {\n      try {\n        // Clear old logs and show loading state\n        setIsLoadingLogs(true);\n        setApiLogs([]);\n\n        const metricData = event.metricData;\n\n        // Prepare the payload to match log analysis server spec\n        // API expects: metric_name, start_time, end_time (ISO 8601 with Z suffix)\n        const endTime = new Date();\n        const startTime = new Date(Date.now() - options.timeWindowMs);\n\n        // Extract metric name with better fallbacks\n\n        // metric_name: the series/metric name from the data\n        const metricName =\n          metricData?.seriesName || metricData?.fieldName || \"Unknown Series\";\n\n        // graph_name: the panel title\n        const graphName = event.panelTitle || \"Unknown Panel\";\n\n        // dashboard_name: from the dashboard state\n        // Based on the structure: event.origin._eventsOrigin._state is the dashboard state\n        const dashboardState = eventOrigin?._eventsOrigin?._state;\n        const dashboardName = dashboardState?.title || \"Unknown Dashboard\";\n\n        // org: Get the Grafana organization ID and convert to string\n        const orgId = String(grafanaConfig.bootData?.user?.orgId || 1);\n\n        const payload = {\n          org: orgId,\n          dashboard: dashboardName,\n          panel_title: graphName,\n          metric_name: metricName,\n          start_time: startTime.toISOString(),\n          end_time: endTime.toISOString(),\n        };\n\n        // Call backend plugin resource endpoint\n        const result = await getBackendSrv().post(\n          `/api/plugins/hover-hover-panel/resources/query_logs`,\n          payload\n        );\n\n        // Parse log_groups response from log analysis server\n        // Expected format: { log_groups: [{ representative_logs: [...], relative_change: number }] }\n        if (result && Array.isArray(result.log_groups)) {\n          const formattedLogs: string[] = [];\n          const MAX_LOGS = options.maxLogs;\n          const MAX_LOG_LENGTH = options.maxLogLength;\n          let totalLogs = 0;\n\n          result.log_groups.forEach((group: any, index: number) => {\n            if (totalLogs >= MAX_LOGS) {\n              return; // Stop processing if we hit the limit\n            }\n\n            const change = group.relative_change;\n            const changeSymbol = change > 0 ? \"↑\" : change < 0 ? \"↓\" : \"→\";\n            const changeColor =\n              change > 50\n                ? \"🔴\"\n                : change > 10\n                ? \"🟠\"\n                : change < -10\n                ? \"🟢\"\n                : \"⚪\";\n\n            formattedLogs.push(\n              `${changeColor} ${changeSymbol} ${change.toFixed(\n                1\n              )}% change from baseline`\n            );\n            totalLogs++;\n\n            if (Array.isArray(group.representative_logs)) {\n              group.representative_logs.forEach((log: string) => {\n                if (totalLogs >= MAX_LOGS) {\n                  return;\n                }\n                // Truncate extremely long logs but allow expansion\n                const truncatedLog =\n                  log.length > MAX_LOG_LENGTH\n                    ? log.substring(0, MAX_LOG_LENGTH) + \"... [truncated]\"\n                    : log;\n                formattedLogs.push(`  ${truncatedLog}`);\n                totalLogs++;\n              });\n            }\n          });\n\n          if (totalLogs >= MAX_LOGS) {\n            formattedLogs.push(\n              `... [${\n                result.log_groups.length - formattedLogs.length\n              } more logs truncated for performance]`\n            );\n          }\n\n          setApiLogs(formattedLogs);\n          setIsLoadingLogs(false);\n        } else {\n          setApiLogs([]);\n          setIsLoadingLogs(false);\n        }\n      } catch (error) {\n        setApiLogs([`Error: ${error}`]);\n        setIsLoadingLogs(false);\n      }\n    },\n    [\n      options.timeWindowMs,\n      options.maxLogs,\n      options.maxLogLength,\n    ]\n  );\n\n  useEffect(() => {\n    // Subscribe to Grafana hover events\n    const appEvents = getAppEvents();\n\n    // Method 1: Use eventBus from props (recommended approach)\n    const dataHoverSub = eventBus\n      ?.getStream(DataHoverEvent)\n      .subscribe((event) => {\n\n        // Extract event origin for panel info\n        const eventOrigin = (event as any)?.origin;\n        const payloadOrigin = (event.payload as any)?.origin;\n\n        // Extract data from the payload\n        const payload = event.payload as any;\n        const point = payload?.point || {};\n        const data = payload?.data; // This should be the DataFrame\n\n        // Get series name from the data frame\n        let seriesName = \"Unknown Series\";\n        let fieldName = \"\";\n        let value: any = undefined;\n        let formattedValue: string | undefined = undefined;\n        let time: number | undefined = undefined;\n\n        // Extract from DataFrame if available\n        if (data && data.fields) {\n          // Find the field that was hovered\n          const fieldIndex = payload?.columnIndex ?? payload?.fieldIndex;\n          const rowIndex = payload?.rowIndex ?? payload?.dataIndex;\n\n          // If columnIndex is undefined, find the first non-time field\n          let targetFieldIndex = fieldIndex;\n          if (targetFieldIndex === undefined) {\n            targetFieldIndex = data.fields.findIndex(\n              (f: any) => f.type !== \"time\"\n            );\n          }\n\n          if (targetFieldIndex !== undefined && data.fields[targetFieldIndex]) {\n            const field = data.fields[targetFieldIndex];\n            fieldName = field.name || \"\";\n\n            // Extract series name with priority: displayName > name > labels.__name__ > labels\n            seriesName =\n              field.config?.displayName ||\n              field.name ||\n              data.name ||\n              \"Unknown Series\";\n\n            // Get the value at the hovered row\n            if (\n              rowIndex !== undefined &&\n              field.values &&\n              field.values.length > rowIndex\n            ) {\n              value = field.values[rowIndex];\n              formattedValue = field.display\n                ? field.display(value).text\n                : String(value);\n            }\n          }\n\n          // Try to get time from the first field (usually time field)\n          if (\n            rowIndex !== undefined &&\n            data.fields[0]?.values?.length > rowIndex\n          ) {\n            time = data.fields[0].values[rowIndex];\n          }\n        }\n\n        // Fallback to point data\n        if (value === undefined && point?.value !== undefined) {\n          value = point.value;\n        }\n        if (seriesName === \"Unknown Series\" && payload?.dataId) {\n          seriesName = payload.dataId;\n        }\n\n        // Extract panel info from available data\n        const refId = data?.refId;\n\n        // Try multiple sources for panel title and ID:\n        // 1. Check if payload has panel info\n        // 2. Use data frame name or refId\n        // 3. Fallback to \"Unknown Panel\"\n\n        let panelTitle = \"Unknown Panel\";\n        let panelId = \"unknown\";\n\n        // PRIMARY: Get title from event.origin._eventsOrigin._state.title\n        if (eventOrigin?._eventsOrigin?._state?.title) {\n          panelTitle = eventOrigin._eventsOrigin._state.title;\n        }\n        // FALLBACK 1: Try direct _state.title (in case structure varies)\n        else if (eventOrigin?._state?.title) {\n          panelTitle = eventOrigin._state.title;\n        }\n        // FALLBACK 2: Try payload origin\n        else if (payloadOrigin?._eventsOrigin?._state?.title) {\n          panelTitle = payloadOrigin._eventsOrigin._state.title;\n        } else if (payloadOrigin?._state?.title) {\n          panelTitle = payloadOrigin._state.title;\n        }\n        // FALLBACK 3: Try data frame metadata\n        else if (data?.meta?.custom?.title) {\n          panelTitle = data.meta.custom.title;\n        }\n        // FALLBACK 4: Use series name or refId\n        else if (data?.name) {\n          panelTitle = `Panel: ${data.name}`;\n        } else if (refId) {\n          panelTitle = `Query ${refId}`;\n        }\n\n        // Get panel ID from refId or origin\n        if (refId) {\n          panelId = refId;\n        } else if (eventOrigin?.panelId) {\n          panelId = eventOrigin.panelId;\n        } else if (payloadOrigin?.panelId) {\n          panelId = payloadOrigin.panelId;\n        }\n\n        const newEvent: HoverEvent = {\n          panelId,\n          panelTitle,\n          timestamp: Date.now(),\n          x: point?.time || point?.x || 0,\n          y: value || point?.y || 0,\n          elementType: \"data-hover\",\n          metricData: {\n            seriesName,\n            fieldName,\n            value,\n            formattedValue,\n            time,\n            fieldIndex: payload?.columnIndex ?? payload?.fieldIndex,\n            dataIndex: payload?.rowIndex ?? payload?.dataIndex,\n            point: point,\n            dataFrame: data,\n          },\n        };\n\n\n        // Update current hover widget\n        setCurrentHover(newEvent);\n\n        // Send to API if configured (pass eventOrigin for dashboard/org info)\n        sendToAPI(newEvent, eventOrigin);\n      });\n\n    // Intentionally NOT subscribing to DataHoverClearEvent\n    // We want to persist the hover data until a new hover event occurs\n\n    // Method 2: Fallback using getAppEvents() for legacy support\n    const legacyHoverSub = appEvents.subscribe(\n      LegacyGraphHoverEvent,\n      (event) => {\n        const newEvent: HoverEvent = {\n          panelId: \"legacy-graph-hover\",\n          panelTitle: \"Legacy Graph Hover\",\n          timestamp: Date.now(),\n          x: (event.payload as any)?.pos?.x || 0,\n          y: (event.payload as any)?.pos?.y || 0,\n          elementType: \"legacy-graph-hover\",\n          metricData: {\n            seriesName: (event.payload as any)?.series?.name || \"Legacy Series\",\n            value: (event.payload as any)?.value,\n          },\n        };\n\n        // Update current hover widget\n        setCurrentHover(newEvent);\n\n        // Send to API if configured\n        sendToAPI(newEvent);\n      }\n    );\n\n    return () => {\n      dataHoverSub?.unsubscribe();\n      legacyHoverSub?.unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id, sendToAPI, eventBus]);\n\n  return (\n    <>\n      {/* Main Panel */}\n      <div className={cx(styles.wrapper)} style={{ width, height }}>\n        {/* Dynamic Current Hover Widget */}\n        {currentHover && (\n          <div className={styles.currentHoverWidget}>\n            <div className={styles.widgetContent}>\n              {/* Compact metadata at the top */}\n              <div className={styles.widgetCompactHeader}>\n                {currentHover.metricData?.time && (\n                  <>\n                    <span className={styles.widgetCompactTime}>\n                      {dateTime(currentHover.metricData.time).format(\n                        \"YYYY-MM-DD HH:mm:ss\"\n                      )}\n                    </span>\n                    <span className={styles.widgetCompactSeparator}>•</span>\n                  </>\n                )}\n                <span className={styles.widgetCompactPanel}>\n                  {currentHover.panelTitle}\n                </span>\n                <span className={styles.widgetCompactSeparator}>•</span>\n                <span className={styles.widgetCompactSeries}>\n                  {currentHover.metricData?.seriesName || \"No Series\"}\n                </span>\n                <span className={styles.widgetCompactSeparator}>•</span>\n                <span className={styles.widgetCompactValue}>\n                  {currentHover.metricData?.formattedValue ||\n                    currentHover.metricData?.value ||\n                    \"—\"}\n                </span>\n              </div>\n\n              {/* API Response Logs Section - takes up most of the space */}\n              {isLoadingLogs ? (\n                <div className={styles.widgetLoading}>Loading logs...</div>\n              ) : apiLogs.length > 0 ? (\n                <div className={styles.widgetLogsSection}>\n                  <div className={styles.widgetLogsList}>\n                    {apiLogs.map((log, index) => {\n                      const isExpanded = expandedLogs.has(index);\n                      const maxLength = options.logTruncateLength;\n                      const isLong = log.length > maxLength;\n\n                      return (\n                        <div\n                          key={index}\n                          className={styles.widgetLogItem}\n                          onClick={() => isLong && toggleLogExpansion(index)}\n                          style={{\n                            cursor: isLong ? \"pointer\" : \"default\",\n                          }}\n                          title={\n                            isLong ? \"Click to expand/collapse\" : undefined\n                          }\n                        >\n                          {isLong && (\n                            <span className={styles.widgetLogToggle}>\n                              {isExpanded ? \"▼\" : \"▶\"}\n                            </span>\n                          )}\n                          <span className={styles.widgetLogText}>\n                            {isExpanded || !isLong\n                              ? log\n                              : log.substring(0, maxLength) +\n                                \"... (click to expand)\"}\n                          </span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              ) : (\n                <div className={styles.widgetLoading}>No logs found</div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {!currentHover && (\n          <div className={styles.noCurrentHover}>\n            <div className={styles.noHoverIcon}>👆</div>\n            <div className={styles.noHoverText}>\n              Hover over a panel to see live data\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = () => {\n  return {\n    wrapper: css`\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      overflow: hidden;\n    `,\n    header: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 8px 16px;\n      border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    `,\n    title: css`\n      margin: 0;\n      font-size: 16px;\n      font-weight: 500;\n    `,\n    count: css`\n      font-size: 12px;\n      opacity: 0.7;\n    `,\n    currentHoverWidget: css`\n      display: flex;\n      flex-direction: column;\n      overflow: hidden;\n      flex: 1;\n      height: 100%;\n    `,\n    widgetHeader: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 12px;\n      padding-bottom: 8px;\n      border-bottom: 1px solid rgba(115, 191, 105, 0.3);\n    `,\n    widgetTitle: css`\n      font-size: 11px;\n      font-weight: 700;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n      color: rgba(115, 191, 105, 1);\n    `,\n    widgetLive: css`\n      font-size: 10px;\n      font-weight: 600;\n      color: rgba(115, 191, 105, 1);\n      animation: blink 1.5s ease-in-out infinite;\n\n      @keyframes blink {\n        0%,\n        100% {\n          opacity: 1;\n        }\n        50% {\n          opacity: 0.4;\n        }\n      }\n    `,\n    widgetContent: css`\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n      flex: 1;\n      min-height: 0;\n    `,\n    widgetCompactHeader: css`\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      padding: 4px 0;\n      font-size: 11px;\n      flex-wrap: wrap;\n      border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n      padding-bottom: 6px;\n      margin-bottom: 4px;\n    `,\n    widgetCompactPanel: css`\n      font-weight: 600;\n      color: rgba(255, 255, 255, 0.9);\n    `,\n    widgetCompactSeparator: css`\n      color: rgba(255, 255, 255, 0.3);\n    `,\n    widgetCompactSeries: css`\n      color: rgba(255, 255, 255, 0.7);\n    `,\n    widgetCompactValue: css`\n      font-weight: 700;\n      color: rgba(115, 191, 105, 1);\n      font-family: \"Roboto Mono\", monospace;\n    `,\n    widgetCompactTime: css`\n      color: rgba(255, 255, 255, 0.6);\n      font-family: \"Roboto Mono\", monospace;\n      font-size: 11px;\n    `,\n    widgetLoading: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 24px;\n      color: rgba(255, 255, 255, 0.5);\n      font-style: italic;\n    `,\n    widgetMainValue: css`\n      display: flex;\n      flex-direction: column;\n      gap: 4px;\n    `,\n    widgetSeriesName: css`\n      font-size: 13px;\n      font-weight: 600;\n      color: rgba(255, 255, 255, 0.9);\n      letter-spacing: 0.3px;\n    `,\n    widgetValue: css`\n      font-size: 32px;\n      font-weight: 700;\n      color: rgba(115, 191, 105, 1);\n      line-height: 1.2;\n      font-family: \"Roboto Mono\", monospace;\n    `,\n    widgetMetadata: css`\n      display: flex;\n      flex-direction: column;\n      gap: 6px;\n      padding-top: 8px;\n      border-top: 1px solid rgba(255, 255, 255, 0.1);\n    `,\n    widgetMetaRow: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      gap: 8px;\n    `,\n    widgetMetaLabel: css`\n      font-size: 11px;\n      font-weight: 600;\n      color: rgba(255, 255, 255, 0.6);\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    `,\n    widgetMetaValue: css`\n      font-size: 12px;\n      font-weight: 500;\n      color: rgba(255, 255, 255, 0.9);\n      text-align: right;\n    `,\n    noCurrentHover: css`\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      padding: 32px 16px;\n      margin: 12px;\n      background: rgba(255, 255, 255, 0.03);\n      border: 2px dashed rgba(255, 255, 255, 0.1);\n      border-radius: 8px;\n      opacity: 0.6;\n    `,\n    noHoverIcon: css`\n      font-size: 48px;\n      margin-bottom: 12px;\n      opacity: 0.5;\n    `,\n    noHoverText: css`\n      font-size: 14px;\n      color: rgba(255, 255, 255, 0.6);\n      text-align: center;\n    `,\n    widgetLogsSection: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n      min-height: 0;\n      padding-top: 8px;\n    `,\n    widgetLogsSectionHeader: css`\n      font-size: 11px;\n      font-weight: 700;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n      color: rgba(115, 191, 105, 0.8);\n      margin-bottom: 8px;\n    `,\n    widgetLogsList: css`\n      display: flex;\n      flex-direction: column;\n      gap: 6px;\n      flex: 1;\n      overflow-y: auto;\n      padding-right: 4px;\n\n      /* Custom scrollbar */\n      &::-webkit-scrollbar {\n        width: 6px;\n      }\n      &::-webkit-scrollbar-track {\n        background: rgba(0, 0, 0, 0.2);\n        border-radius: 3px;\n      }\n      &::-webkit-scrollbar-thumb {\n        background: rgba(115, 191, 105, 0.4);\n        border-radius: 3px;\n      }\n      &::-webkit-scrollbar-thumb:hover {\n        background: rgba(115, 191, 105, 0.6);\n      }\n    `,\n    widgetLogItem: css`\n      display: flex;\n      gap: 6px;\n      align-items: flex-start;\n      padding: 4px 6px;\n      margin: 0;\n      font-family: \"Roboto Mono\", \"Courier New\", monospace;\n      font-size: 11px;\n      line-height: 1.4;\n      transition: all 0.15s ease;\n      user-select: text;\n      border-left: 2px solid transparent;\n\n      &:hover {\n        background: rgba(255, 255, 255, 0.03);\n      }\n\n      &[style*=\"cursor: pointer\"] {\n        &:hover {\n          background: rgba(115, 191, 105, 0.08);\n          border-left-color: rgba(115, 191, 105, 0.6);\n        }\n      }\n    `,\n    widgetLogToggle: css`\n      color: rgba(115, 191, 105, 0.7);\n      font-size: 9px;\n      flex-shrink: 0;\n      width: 12px;\n      margin-top: 3px;\n    `,\n    widgetLogText: css`\n      color: rgba(255, 255, 255, 0.85);\n      word-break: break-word;\n      flex: 1;\n    `,\n    widgetLogDivider: css`\n      height: 1px;\n      background: linear-gradient(\n        to right,\n        transparent,\n        rgba(115, 191, 105, 0.3) 20%,\n        rgba(115, 191, 105, 0.3) 80%,\n        transparent\n      );\n      margin: 12px 0;\n    `,\n    eventList: css`\n      flex: 1;\n      overflow-y: auto;\n      padding: 8px;\n    `,\n    event: css`\n      margin-bottom: 8px;\n      padding: 8px 12px;\n      background: rgba(255, 255, 255, 0.05);\n      border-radius: 4px;\n      border-left: 3px solid rgba(115, 191, 105, 0.7);\n      transition: all 0.2s ease;\n\n      &:hover {\n        background: rgba(255, 255, 255, 0.08);\n        border-left-color: rgba(115, 191, 105, 1);\n      }\n    `,\n    eventHeader: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 4px;\n    `,\n    panelName: css`\n      font-weight: 500;\n      font-size: 14px;\n    `,\n    timestamp: css`\n      font-size: 11px;\n      opacity: 0.6;\n    `,\n    eventDetails: css`\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n      font-size: 12px;\n      opacity: 0.9;\n    `,\n    detail: css`\n      display: inline-block;\n    `,\n    metricInfo: css`\n      display: flex;\n      gap: 8px;\n      align-items: flex-start;\n    `,\n    metricLabel: css`\n      font-weight: 600;\n      color: rgba(255, 255, 255, 0.7);\n      min-width: 60px;\n    `,\n    metricValue: css`\n      color: rgba(255, 255, 255, 0.9);\n      word-break: break-word;\n      flex: 1;\n    `,\n    noEvents: css`\n      text-align: center;\n      padding: 32px;\n      opacity: 0.5;\n    `,\n    debugInfo: css`\n      margin-top: 8px;\n      border-top: 1px solid rgba(255, 255, 255, 0.1);\n      padding-top: 8px;\n    `,\n    debugSummary: css`\n      cursor: pointer;\n      font-size: 11px;\n      color: rgba(255, 255, 255, 0.6);\n      &:hover {\n        color: rgba(255, 255, 255, 0.8);\n      }\n    `,\n    debugPre: css`\n      background: rgba(0, 0, 0, 0.3);\n      padding: 8px;\n      border-radius: 4px;\n      font-size: 10px;\n      overflow-x: auto;\n      margin: 4px 0 0 0;\n      max-height: 200px;\n      overflow-y: auto;\n    `,\n    customTooltip: css`\n      position: fixed;\n      z-index: 9999;\n      background: rgba(0, 0, 0, 0.9);\n      color: white;\n      padding: 12px;\n      border-radius: 6px;\n      border: 1px solid rgba(115, 191, 105, 0.7);\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n      max-width: 300px;\n      font-size: 12px;\n      pointer-events: none;\n      backdrop-filter: blur(4px);\n    `,\n    tooltipHeader: css`\n      margin-bottom: 8px;\n      padding-bottom: 6px;\n      border-bottom: 1px solid rgba(115, 191, 105, 0.3);\n      font-size: 14px;\n      color: rgba(115, 191, 105, 1);\n    `,\n    tooltipContent: css`\n      display: flex;\n      flex-direction: column;\n      gap: 4px;\n    `,\n    tooltipRow: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: flex-start;\n      gap: 8px;\n    `,\n    tooltipLabel: css`\n      font-weight: 600;\n      color: rgba(255, 255, 255, 0.7);\n      min-width: 50px;\n      flex-shrink: 0;\n    `,\n    tooltipValue: css`\n      color: rgba(255, 255, 255, 0.9);\n      word-break: break-word;\n      text-align: right;\n      flex: 1;\n    `,\n    tooltipDivider: css`\n      margin: 8px 0;\n      height: 1px;\n      background: rgba(115, 191, 105, 0.3);\n    `,\n    tooltipSection: css`\n      margin-top: 8px;\n    `,\n    tooltipSectionHeader: css`\n      font-weight: 600;\n      color: rgba(115, 191, 105, 0.8);\n      font-size: 11px;\n      text-transform: uppercase;\n      margin-bottom: 6px;\n      letter-spacing: 0.5px;\n    `,\n    tooltipLoading: css`\n      color: rgba(255, 255, 255, 0.6);\n      font-style: italic;\n      font-size: 11px;\n    `,\n    tooltipDataFrame: css`\n      margin-bottom: 6px;\n      padding-bottom: 4px;\n      border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n      &:last-child {\n        border-bottom: none;\n        margin-bottom: 0;\n      }\n    `,\n    tooltipFields: css`\n      margin-top: 4px;\n    `,\n    tooltipMuted: css`\n      color: rgba(255, 255, 255, 0.5);\n      font-size: 11px;\n      font-style: italic;\n    `,\n  };\n};\n","import { PanelPlugin } from \"@grafana/data\";\nimport { SimpleOptions } from \"./types\";\nimport { HoverTrackerPanel } from \"./HoverTrackerPanel\";\nimport { addStandardOptions } from \"./HoverTrackerEditor\";\n\nexport const plugin = new PanelPlugin<SimpleOptions>(\n  HoverTrackerPanel\n).setPanelOptions((builder) => {\n  addStandardOptions(builder);\n  return builder;\n});\n","import { PanelOptionsEditorBuilder } from \"@grafana/data\";\nimport { SimpleOptions } from \"./types\";\n\nexport const addStandardOptions = (\n  builder: PanelOptionsEditorBuilder<SimpleOptions>\n) => {\n  builder\n    .addNumberInput({\n      path: \"timeWindowMs\",\n      name: \"Time Window (ms)\",\n      description:\n        \"Time window for log queries in milliseconds (default: 1 hour)\",\n      defaultValue: 3600000,\n      settings: {\n        min: 1000,\n        step: 1000,\n      },\n    })\n    .addNumberInput({\n      path: \"maxLogs\",\n      name: \"Max Logs\",\n      description: \"Maximum number of log entries to display\",\n      defaultValue: 500,\n      settings: {\n        min: 1,\n        step: 1,\n      },\n    })\n    .addNumberInput({\n      path: \"maxLogLength\",\n      name: \"Max Log Length\",\n      description: \"Maximum length of individual log entry\",\n      defaultValue: 10000,\n      settings: {\n        min: 100,\n        step: 100,\n      },\n    })\n    .addNumberInput({\n      path: \"logTruncateLength\",\n      name: \"Log Truncate Length\",\n      description: \"Character count threshold for expandable logs\",\n      defaultValue: 120,\n      settings: {\n        min: 50,\n        step: 10,\n      },\n    });\n};\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","getStyles","wrapper","css","header","title","count","currentHoverWidget","widgetHeader","widgetTitle","widgetLive","widgetContent","widgetCompactHeader","widgetCompactPanel","widgetCompactSeparator","widgetCompactSeries","widgetCompactValue","widgetCompactTime","widgetLoading","widgetMainValue","widgetSeriesName","widgetValue","widgetMetadata","widgetMetaRow","widgetMetaLabel","widgetMetaValue","noCurrentHover","noHoverIcon","noHoverText","widgetLogsSection","widgetLogsSectionHeader","widgetLogsList","widgetLogItem","widgetLogToggle","widgetLogText","widgetLogDivider","eventList","event","eventHeader","panelName","timestamp","eventDetails","detail","metricInfo","metricLabel","metricValue","noEvents","debugInfo","debugSummary","debugPre","customTooltip","tooltipHeader","tooltipContent","tooltipRow","tooltipLabel","tooltipValue","tooltipDivider","tooltipSection","tooltipSectionHeader","tooltipLoading","tooltipDataFrame","tooltipFields","tooltipMuted","plugin","PanelPlugin","props","currentHover","options","width","height","id","eventBus","styles","useStyles2","setCurrentHover","useState","apiLogs","setApiLogs","expandedLogs","setExpandedLogs","Set","isLoadingLogs","setIsLoadingLogs","sendToAPI","useCallback","eventOrigin","fn","grafanaConfig","metricData","endTime","Date","startTime","now","timeWindowMs","metricName","seriesName","fieldName","graphName","panelTitle","dashboardState","_eventsOrigin","_state","dashboardName","payload","org","String","bootData","user","orgId","dashboard","panel_title","metric_name","start_time","toISOString","end_time","result","getBackendSrv","post","Array","isArray","log_groups","formattedLogs","MAX_LOGS","maxLogs","MAX_LOG_LENGTH","maxLogLength","totalLogs","forEach","group","index","change","relative_change","changeSymbol","changeColor","push","toFixed","representative_logs","log","truncatedLog","length","substring","self","this","args","arguments","apply","err","useEffect","appEvents","getAppEvents","dataHoverSub","getStream","DataHoverEvent","subscribe","payloadOrigin","data","origin","point","formattedValue","time","fields","fieldIndex","columnIndex","rowIndex","dataIndex","targetFieldIndex","findIndex","f","type","field","name","config","displayName","values","display","text","dataId","refId","panelId","meta","custom","newEvent","x","y","elementType","dataFrame","legacyHoverSub","LegacyGraphHoverEvent","pos","series","unsubscribe","div","className","cx","style","span","dateTime","format","map","isExpanded","has","maxLength","logTruncateLength","isLong","onClick","prev","newSet","delete","add","toggleLogExpansion","cursor","setPanelOptions","builder","addNumberInput","path","description","defaultValue","settings","min","step","addStandardOptions"],"sourceRoot":""}